generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(uuid())
  email                String         @unique
  password             String
  name                 String?
  sex                  String?
  street               String?
  number               String?
  zipCode              String?
  city                 String?
  state                String?
  birthDate            String?
  phone                String?
  currentWeight        String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  role                 String         @default("STUDENT")
  history              History[]
  oldWeights           Weight[]
  trainingWeeks        TrainingWeek[]
  diets                Diet[]

  studentsAsNutritionist Relationship[] @relation("NutritionistToStudent")
  studentsAsTrainer      Relationship[] @relation("TrainerToStudent")
  nutritionistRelation   Relationship?  @relation("StudentToNutritionist")
  trainerRelation        Relationship?  @relation("StudentToTrainer")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Relationship {
  id String @id @default(uuid())

  nutritionist   User?   @relation("NutritionistToStudent", fields: [nutritionistId], references: [id])
  nutritionistId String?
  student        User?   @relation("StudentToNutritionist", fields: [studentId], references: [id], onDelete: SetNull)
  studentId      String? @unique

  trainer    User?   @relation("TrainerToStudent", fields: [trainerId], references: [id])
  trainerId  String?
  student2   User?   @relation("StudentToTrainer", fields: [student2Id], references: [id], onDelete: SetNull)
  student2Id String? @unique

  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("relationships")
}

model TrainingWeek {
  id           String        @id @default(uuid())
  weekNumber   Int
  trainingDays TrainingDay[]
  current      Boolean       @default(false)
  information  String?
  isCompleted  Boolean       @default(false)
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("trainingWeeks")
}

model History {
  id        String   @id @default(uuid())
  event     String
  date      String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("histories")
}

model Weight {
  id        String   @id @default(uuid())
  weight    String
  date      String
  bf        String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@map("weights")
}

model TrainingDay {
  id             String       @id @default(uuid())
  group          String
  dayOfWeek      String
  isCompleted    Boolean      @default(false)
  comments       String?
  exercises      Exercise[]
  trainingWeek   TrainingWeek @relation(fields: [trainingWeekId], references: [id], onDelete: Cascade)
  trainingWeekId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("trainingDays")
}

model Exercise {
  id            String       @id @default(uuid())
  name          String
  variation     String?
  repetitions   Int
  sets          Int
  isCompleted   Boolean      @default(false)
  seriesResults Serie[]
  trainingDay   TrainingDay? @relation(fields: [trainingDayId], references: [id])
  trainingDayId String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("exercises")
}

model Serie {
  id          String   @id @default(uuid())
  seriesIndex Int?
  repetitions Int?
  weight      Int?
  exercise    Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("series")
}

model Diet {
  id                 String  @id @default(uuid())
  weekNumber         Int
  meals              Meal[]
  totalCalories      Int?
  totalProtein       Float?
  totalCarbohydrates Float?
  totalFat           Float?
  isCurrent          Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  @@map("diets")
}

model Meal {
  id            String      @id @default(uuid())
  name          String?
  calories      Int?
  protein       Float?
  carbohydrates Float?
  fat           Float?
  servingSize   String?
  mealType      String?
  day           Int?
  hour          String?
  isCompleted   Boolean?    @default(false)
  mealItems     MealItems[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Diet          Diet?       @relation(fields: [dietId], references: [id])
  dietId        String?

  @@map("meals")
}

model MealItems {
  id            String  @id @default(uuid())
  name          String
  quantity      Int
  calories      Int?
  protein       Float?
  carbohydrates Float?
  fat           Float?
  isCompleted   Boolean @default(false)

  Meal      Meal?    @relation(fields: [mealId], references: [id])
  mealId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("mealItems")
}
